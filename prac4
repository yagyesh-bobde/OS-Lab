#include <stdio.h>
#include <stdlib.h>

// Define the process structure
typedef struct {
    char id;
    int burst_time;
    int arrival_time;
    int priority;  // Only used for Non-preemptive Priority
    int remaining_time; // Only used for Round Robin
} Process;

// Function to calculate Gantt Chart and statistics for FCFS
void FCFS(Process processes[], int n, int fcfs) {
    int total_waiting_time = 0;
    int total_turnaround_time = 0;
    int current_time = 0;
    
    if(fcfs==1) {
        printf("Gantt Chart (SJF):\n");
    } else if (fcfs==2) {
        printf("Gantt Chart (Priority first):\n");
    }
    else {
        printf("Gantt Chart (FCFS):\n");
    }
    
    printf("Time    | Process\n");
    printf("-------------------\n");
    
    
    for (int i = 0; i < n; i++) {
        printf("%d       | P-%c\n", current_time, processes[i].id);

        // Calculate waiting time for the current process
        int waiting_time = current_time - processes[i].arrival_time;
        if (waiting_time < 0) {
            waiting_time = 0;
        }
        total_waiting_time += waiting_time;

        // Calculate turnaround time for the current process
        int turnaround_time = waiting_time + processes[i].burst_time;
        total_turnaround_time += turnaround_time;

        current_time += processes[i].burst_time;
    }

    printf("\nAverage Waiting Time: %.2f\n", (float)total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround_time / n);
}

// Function to calculate Gantt Chart and statistics for Non-preemptive SJF
void SJF(Process processes[], int n) {
    // Sort the processes by burst time
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (processes[i].burst_time > processes[j].burst_time) {
                Process temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }

    FCFS(processes, n, 1);
}

// Function to calculate Gantt Chart and statistics for Non-preemptive Priority
void Priority(Process processes[], int n) {
    // Sort the processes by priority
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (processes[i].priority > processes[j].priority) {
                Process temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }

    FCFS(processes, n, 2);
}


int main() {
    int n, time_quantum;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];

    for (int i = 0; i < n; i++) {
        printf("Enter process ID: ");
        scanf(" %c", &processes[i].id);
        printf("Enter burst time for process %c: ", processes[i].id);
        scanf("%d", &processes[i].burst_time);
        printf("Enter arrival time for process %c: ", processes[i].id);
        scanf("%d", &processes[i].arrival_time);

        // Only needed for Non-preemptive Priority
        printf("Enter priority for process %c: ", processes[i].id);
        scanf("%d", &processes[i].priority);
    }
    FCFS(processes, n, 0);
    printf("\n");
    SJF(processes, n);
    printf("\n");
    Priority(processes, n);
    printf("\n");

    return 0;
}
